//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Portfolio.Web.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AppEntitties : DbContext
    {
        public AppEntitties()
            : base("name=AppEntitties")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<benchmark> benchmark { get; set; }
        public virtual DbSet<benchmark_index> benchmark_index { get; set; }
        public virtual DbSet<index> index { get; set; }
        public virtual DbSet<instrument> instrument { get; set; }
        public virtual DbSet<instrument_type> instrument_type { get; set; }
        public virtual DbSet<portfolio> portfolio { get; set; }
        public virtual DbSet<portfolio_to_benchmark> portfolio_to_benchmark { get; set; }
        public virtual DbSet<position> position { get; set; }
        public virtual DbSet<tblBenchmarkPerformance> tblBenchmarkPerformance { get; set; }
        public virtual DbSet<tblImportPrices> tblImportPrices { get; set; }
        public virtual DbSet<tblIndexPrices> tblIndexPrices { get; set; }
        public virtual DbSet<tblInstrumentPrices> tblInstrumentPrices { get; set; }
        public virtual DbSet<tblPortfolioMarketValue> tblPortfolioMarketValue { get; set; }
        public virtual DbSet<tblPortfolioPerformance> tblPortfolioPerformance { get; set; }
        public virtual DbSet<tblTransaction> tblTransaction { get; set; }
        public virtual DbSet<tblUser> tblUser { get; set; }
        public virtual DbSet<transaction_type> transaction_type { get; set; }
    
        public virtual int spBuyTransaction(Nullable<int> pId, Nullable<int> instrId, Nullable<System.DateTime> date, Nullable<decimal> quantity)
        {
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("pId", pId) :
                new ObjectParameter("pId", typeof(int));
    
            var instrIdParameter = instrId.HasValue ?
                new ObjectParameter("instrId", instrId) :
                new ObjectParameter("instrId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBuyTransaction", pIdParameter, instrIdParameter, dateParameter, quantityParameter);
        }
    
        public virtual ObjectResult<spCalcBenchPerformance_Result> spCalcBenchPerformance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCalcBenchPerformance_Result>("spCalcBenchPerformance");
        }
    
        public virtual ObjectResult<spCalcMarkValue_Result> spCalcMarkValue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCalcMarkValue_Result>("spCalcMarkValue");
        }
    
        public virtual ObjectResult<spGetPortfolios_Result> spGetPortfolios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPortfolios_Result>("spGetPortfolios");
        }
    
        public virtual int spImportPriceData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spImportPriceData");
        }
    
        public virtual int spSellTransaction(Nullable<int> pId, Nullable<int> instrId, Nullable<System.DateTime> date, Nullable<decimal> quantity)
        {
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("pId", pId) :
                new ObjectParameter("pId", typeof(int));
    
            var instrIdParameter = instrId.HasValue ?
                new ObjectParameter("instrId", instrId) :
                new ObjectParameter("instrId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSellTransaction", pIdParameter, instrIdParameter, dateParameter, quantityParameter);
        }
    
        public virtual ObjectResult<spSELPortfolioMetrics_Result> spSELPortfolioMetrics(Nullable<int> pId)
        {
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("pId", pId) :
                new ObjectParameter("pId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSELPortfolioMetrics_Result>("spSELPortfolioMetrics", pIdParameter);
        }
    
        public virtual ObjectResult<spSELPortfolioReport_Result> spSELPortfolioReport(Nullable<int> pID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("pID", pID) :
                new ObjectParameter("pID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSELPortfolioReport_Result>("spSELPortfolioReport", pIDParameter);
        }
    
        public virtual int spSetBenchPerformance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSetBenchPerformance");
        }
    
        public virtual int spSetPortfolioPerformance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSetPortfolioPerformance");
        }
    
        public virtual int spSetPortMarketValue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSetPortMarketValue");
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PortfolioViewer.Models.Portfolio
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CustomerPortfolioEntities : DbContext
    {
        public CustomerPortfolioEntities()
            : base("name=CustomerPortfolioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<PortfolioHoldings> GetPortfolioHoldings(Nullable<int> portfolioID)
        {
            var portfolioIDParameter = portfolioID.HasValue ?
                new ObjectParameter("PortfolioID", portfolioID) :
                new ObjectParameter("PortfolioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PortfolioHoldings>("GetPortfolioHoldings", portfolioIDParameter);
        }
    
        public virtual ObjectResult<Portfolio> GetPortfolios(Nullable<int> customer_ID)
        {
            var customer_IDParameter = customer_ID.HasValue ?
                new ObjectParameter("Customer_ID", customer_ID) :
                new ObjectParameter("Customer_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Portfolio>("GetPortfolios", customer_IDParameter);
        }
    
        public virtual ObjectResult<MonthlyPerformance> GetMonthlyPerformance(Nullable<int> portfolio_ID)
        {
            var portfolio_IDParameter = portfolio_ID.HasValue ?
                new ObjectParameter("Portfolio_ID", portfolio_ID) :
                new ObjectParameter("Portfolio_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonthlyPerformance>("GetMonthlyPerformance", portfolio_IDParameter);
        }
    
        public virtual ObjectResult<PortfolioInfo> GetPortfolioInfo(Nullable<int> portfolioID)
        {
            var portfolioIDParameter = portfolioID.HasValue ?
                new ObjectParameter("PortfolioID", portfolioID) :
                new ObjectParameter("PortfolioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PortfolioInfo>("GetPortfolioInfo", portfolioIDParameter);
        }
    
        public virtual ObjectResult<PortfolioKPIS> GetPortfolioKPIS(Nullable<int> portfolio_ID)
        {
            var portfolio_IDParameter = portfolio_ID.HasValue ?
                new ObjectParameter("Portfolio_ID", portfolio_ID) :
                new ObjectParameter("Portfolio_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PortfolioKPIS>("GetPortfolioKPIS", portfolio_IDParameter);
        }
    
        public virtual ObjectResult<HoldingsDetail> GetHoldingsDetail(Nullable<int> portfolioID, Nullable<int> securityID)
        {
            var portfolioIDParameter = portfolioID.HasValue ?
                new ObjectParameter("PortfolioID", portfolioID) :
                new ObjectParameter("PortfolioID", typeof(int));
    
            var securityIDParameter = securityID.HasValue ?
                new ObjectParameter("SecurityID", securityID) :
                new ObjectParameter("SecurityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HoldingsDetail>("GetHoldingsDetail", portfolioIDParameter, securityIDParameter);
        }
    
        public virtual int spGetPortfolios(Nullable<int> customer_ID)
        {
            var customer_IDParameter = customer_ID.HasValue ?
                new ObjectParameter("Customer_ID", customer_ID) :
                new ObjectParameter("Customer_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetPortfolios", customer_IDParameter);
        }
    }
}
